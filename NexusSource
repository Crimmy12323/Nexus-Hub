-- Load the Luna Interface Suite
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

-- Create the window
local Window = Luna:CreateWindow({
    Name = "Nexus Hub", -- Title of your window
    LogoID = "82795327169782", -- Asset ID of your logo, set to nil if you don't have one
    LoadingEnabled = false, -- Whether to enable the loading animation
    LoadingTitle = "Luna Interface Suite", -- Loading screen title
    LoadingSubtitle = "by Nebula Softworks", -- Loading screen subtitle
    KeySystem = false, -- Key system (not in use yet)
    KeySettings = {
        Title = "Luna Example Key",
        Subtitle = "Nexus Hub Key System",
        Note = "Best Key System Ever! Please use a HWID-based key system.",
        FileName = "Key", -- File name for storing keys
        SaveKey = true, -- Save the user's key
        KeyLink = "", -- URL for the key
        Key = {"Example Key"} -- Accepted keys
    }
})

print("Nexus Hub Executed")

Luna:Notification({ 
	Title = "Nexus Hub Executed",
	Icon = "notifications_active",
	ImageSource = "Material",
	Content = "Thank you Hunter for making this master peice of a UI Libary"
})

local MainTab = Window:CreateTab({
    Name = "Main",
    Icon = "home_filled", -- Icon for the tab
    ImageSource = "Material", -- Image source (Material Design)
    ShowTitle = true -- Whether to show the title at the top of the tab
})

local CharacterTab = Window:CreateTab({
    Name = "Character",
    Icon = "directions_run", -- Icon for the tab
    ImageSource = "Material", -- Image source (Material Design)
    ShowTitle = true -- Whether to show the title at the top of the tab
})

local MiscTab = Window:CreateTab({
    Name = "Miscellaneous",
    Icon = "miscellaneous_services", -- Icon for the tab
    ImageSource = "Material", -- Image source (Material Design)
    ShowTitle = true -- Whether to show the title at the top of the tab
})

local InfoTab = Window:CreateTab({
    Name = "Information",
    Icon = "info", -- Icon for the tab
    ImageSource = "Material", -- Image source (Material Design)
    ShowTitle = true -- Whether to show the title at the top of the tab
})

MainTab:CreateSection("Universal")

local Button = MainTab:CreateButton({
    Name = "Infinite Yeild", -- Button name
    Description = "The most popular admin script.", -- Button description
    Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))() 
        print("Inf Yeild Succesfully Executed!")
    end
})

local Label = MiscTab:CreateLabel({
	Text = "Game Modification",
	Style = 1 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = MiscTab:CreateButton({
    Name = "Anti Afk", -- Button name
    Description = "Enables Anti Afk.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/hassanxzayn-lua/Anti-afk/main/antiafkbyhassanxzyn"))();
        print("Anti Afk Succesfully Enabled")
    end
})

local Label = MiscTab:CreateLabel({
	Text = "Warning",
	Style = 3 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = MiscTab:CreateButton({
    Name = "Destoy Luna UI", -- Button name
    Description = "Destroys luna UI.", -- Button description
    Callback = function()
        Luna:Destroy()
        print("UI Succesfully Destoyed!")
    end
})

local Label = MiscTab:CreateLabel({
	Text = "Testing",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})

local Button = MiscTab:CreateButton({
    Name = "UNC Test", -- Button name
    Description = "Runs a UNC test.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/unified-naming-convention/NamingStandard/refs/heads/main/UNCCheckEnv.lua"))() 
        print("UNC Test Succesfully Executed!")
    end
})

local Button = MiscTab:CreateButton({
    Name = "sUNC Test", -- Button name
    Description = "Runs a sUNC test.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://gitlab.com/sens3/nebunu/-/raw/main/HummingBird8's_sUNC_yes_i_moved_to_gitlab_because_my_github_acc_got_brickedd/sUNCm0m3n7.lua"))()
        print("sUNC Test Succesfully Executed!")
    end
})

local Paragraph = InfoTab:CreateParagraph({
	Title = "Credits",
	Text = "@mrkillinghunter_ on discord"
})

local Button = MainTab:CreateButton({
    Name = "Dex Explorer", -- Button name
    Description = "Best roblox game explorer.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/TheRareOcelot/test/main/Dex%20Explorer", true))() 
        print("Dex Explorer Succesfully Executed!")
    end
})

local Button = MainTab:CreateButton({
    Name = "Simple Spy", -- Button name
    Description = "Remote spy gui.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua", true))() 
        print("Remote Spy Succesfully Executed!")
    end
})

MainTab:CreateSection("Chat Bypass")

local Button = MainTab:CreateButton({
    Name = "Gaze Chat Bypass", -- Button name
    Description = "A decent bypasser.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Crimmy12323/gaze-bypass/refs/heads/main/GazeBypass'))()"))() 
        print("Gaze Bypasser Succesfully Executed!")
    end
})

local Button = MainTab:CreateButton({
    Name = "UserCreation Chat Bypass", -- Button name
    Description = "BEST chat bypasser.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/1price/usercreation/refs/heads/main/UserCreation.lua", true))()
        print("Gaze Bypasser Succesfully Executed!")
    end
})

MainTab:CreateSection("Murder Mystery 2")

local Button = MainTab:CreateButton({
    Name = "Vertex", -- Button name
    Description = "My favourite MM2 script.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/vertex-peak/vertex/refs/heads/main/loadstring"))() 
        print("Vertex Succesfully Executed!")
    end
})

local Button = MainTab:CreateButton({
    Name = "Snap Sanix", -- Button name
    Description = "Best MM2 script.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Roman34296589/SnapSanixHUB/refs/heads/main/SnapSanixHUB.lua'))()"))() 
        print("Snap Sanix Succesfully Executed!")
    end
})

MainTab:CreateSection("MIC UP üîä")

local Button = MainTab:CreateButton({
    Name = "Kitty Hub", -- Button name
    Description = "Sexiest Mic Up script.", -- Button description
    Callback = function()
        loadstring(game:HttpGet('https://whimper.xyz/kitty'))()
        print("Kitty Hub Succesfully Executed!")
    end
})

MainTab:CreateSection("[üè¥‚Äç‚ò†Ô∏è] Fisch")

local Button = MainTab:CreateButton({
    Name = "Forge Hub", -- Button name
    Description = "Advanced Fisch script.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Skzuppy/forge-hub/main/loader.lua"))()
        print("Forge Hub Succesfully Executed!")
    end
})

local Button = MainTab:CreateButton({
    Name = "Firen Hub", -- Button name
    Description = "Best autofarm script for Fisch.", -- Button description
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Skibidiking123/Fisch1/refs/heads/main/FischMain"))()
        print("Firen Hub Succesfully Executed!")
    end
})

CharacterTab:CreateSection("Universal")

local flying = false
local speed = 50
local flySpeed = 1
local flyControl

local Bind = CharacterTab:CreateBind({
Name = "Fly Toggle",
Description = nil,
CurrentKeybind = "Q", -- Check Roblox Studio Docs For KeyCode Names
HoldToInteract = false, -- When true, Instead of toggling, You hold to achieve the active state of the Bind
Callback = function(BindState)
-- The function that takes place when the keybind is pressed
-- The variable (BindState) is a boolean for whether the Bind is being held or not (HoldToInteract needs to be true) OR it is whether the Bind is active
if BindState then
startFlying()
else
stopFlying()
end
end
}, "FlyToggle") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

function startFlying()
if not flying then
flying = true
local player = game.Players.LocalPlayer
local character = player.Character
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootPart = character:FindFirstChild("HumanoidRootPart")

flyControl = Instance.new("BodyVelocity", rootPart)
flyControl.Velocity = Vector3.new(0, 0, 0)
flyControl.MaxForce = Vector3.new(9e9, 9e9, 9e9)

local flyGyro = Instance.new("BodyGyro", rootPart)
flyGyro.CFrame = rootPart.CFrame
flyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
flyGyro.P = 9e4

humanoid.PlatformStand = true

game:GetService("RunService").RenderStepped:Connect(function()
if flying then
local moveDirection = Vector3.new(0, 0, 0)
if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then
moveDirection = moveDirection + (workspace.CurrentCamera.CFrame.LookVector * flySpeed)
end
if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then
moveDirection = moveDirection - (workspace.CurrentCamera.CFrame.LookVector * flySpeed)
end
if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then
moveDirection = moveDirection - (workspace.CurrentCamera.CFrame.RightVector * flySpeed)
end
if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then
moveDirection = moveDirection + (workspace.CurrentCamera.CFrame.RightVector * flySpeed)
end
if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then
moveDirection = moveDirection + Vector3.new(0, flySpeed, 0)
end
if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftControl) then
moveDirection = moveDirection - Vector3.new(0, flySpeed, 0)
end

flyControl.Velocity = moveDirection
flyGyro.CFrame = workspace.CurrentCamera.CFrame
end
end)
end
end

function stopFlying()
if flying then
flying = false
local player = game.Players.LocalPlayer
local character = player.Character
local humanoid = character:FindFirstChildOfClass("Humanoid")
local rootPart = character:FindFirstChild("HumanoidRootPart")

if rootPart:FindFirstChildOfClass("BodyVelocity") then
rootPart:FindFirstChildOfClass("BodyVelocity"):Destroy()
end
if rootPart:FindFirstChildOfClass("BodyGyro") then
rootPart:FindFirstChildOfClass("BodyGyro"):Destroy()
end

humanoid.PlatformStand = false
end
end

local Input = Tab:CreateInput({
Name = "Fly Speed",
Description = nil,
PlaceholderText = "Enter Fly Speed",
CurrentValue = tostring(flySpeed), -- the current text
Numeric = true, -- When true, the user may only type numbers in the box (Example walkspeed)
MaxCharacters = nil, -- if a number, the textbox length cannot exceed the number
Enter = true, -- When true, the callback will only be executed when the user presses enter.
Callback = function(Text)
-- The function that takes place when the input is changed
-- The variable (Text) is a string for the value in the text box
flySpeed = tonumber(Text) or flySpeed
end
}, "FlySpeedInput") -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps

local WalkSpeedSlider = CharacterTab:CreateSlider({
    Name = "WalkSpeed", -- Slider name
    Range = {0, 200}, -- Min and max values for walk speed
    Increment = 1, -- Value change increment
    CurrentValue = 16, -- Initial value for walk speed
    Callback = function(Value)
        -- Set the player's walk speed based on the slider value
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
    end
}, "WalkSpeedSlider")

JumpPowerSlider = CharacterTab:CreateSlider({
    Name = "JumpPower", -- Slider name
    Range = {50, 250}, -- Min and max values for jump power
    Increment = 1, -- Value change increment
    CurrentValue = 50, -- Initial value for jump power
    Callback = function(Value)
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                -- Check if the character is using R15 (humanoid has RigType)
                if humanoid.RigType == Enum.HumanoidRigType.R15 then
                    -- Use JumpHeight for R15
                    humanoid.JumpHeight = Value
                else
                    -- Use JumpPower for R6
                    humanoid.JumpPower = Value
                end
            end
        end
    end
}, "JumpPowerSlider")

local Button = CharacterTab:CreateButton({
    Name = "Reset to Default", -- Button name
    Description = "Resets WalkSpeed and JumpPower to default values and slider positions.", -- Button description
    Callback = function()
        -- Reset the WalkSpeed and JumpPower of the player
        local player = game.Players.LocalPlayer
        if player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16 -- Default WalkSpeed value
                humanoid.JumpPower = 50 -- Default JumpPower value
            end
        end

        -- Update the sliders back to their default values
        WalkSpeedSlider:UpdateValue(16) -- Reset WalkSpeed slider to default (16)
        JumpPowerSlider:UpdateValue(50) -- Reset JumpPower slider to default (50)
        
        -- Optionally, print a message to confirm reset
        print("WalkSpeed and JumpPower have been reset to their default values.")
    end
})

CharacterTab:CreateSection("R6 Character")

local Button = CharacterTab:CreateButton({
    Name = "Fe Head Backpack", -- Button name
    Description = "ServerSided character modification.", -- Button description
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/Gazer-Ha/Valiant-Ui-Lib-Gazed-/refs/heads/main/Head%20Pack'))()
        print("Fe Head Backpack Succesfully Executed!")
    end
})

local Button = CharacterTab:CreateButton({
    Name = "Fe Head Down", -- Button name
    Description = "ServerSided character modification.", -- Button description
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/Gazer-Ha/Valiant-Ui-Lib-Gazed-/refs/heads/main/Head%20Down'))()
        print("Fe Head Down Succesfully Executed!")
    end
})
